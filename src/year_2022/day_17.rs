use std::{collections::HashSet, hash::Hash, thread::sleep, time::Duration};

use crate::solver::Solver;

const MIN_X: u8 = 0;
const MAX_X: u8 = 7;

#[derive(Debug)]
enum Dir {
    Left,
    Right,
}

impl From<char> for Dir {
    fn from(value: char) -> Self {
        if value == '<' {
            Self::Left
        } else {
            Self::Right
        }
    }
}

#[derive(Debug)]
#[repr(u8)]
enum Shape {
    Flat,
    Cross,
    Angle,
    Tall,
    Block,
}

impl Shape {
    fn get_pieces(&self, pos: &P) -> Vec<P> {
        let x = pos.0;
        let y = pos.1;

        match self {
            Shape::Flat => vec![P(x, y), P(x + 1, y), P(x + 2, y), P(x + 3, y)],
            Shape::Cross => vec![
                P(x + 1, y),
                P(x, y + 1),
                P(x + 1, y + 1),
                P(x + 2, y + 1),
                P(x + 1, y + 2),
            ],
            Shape::Angle => vec![
                P(x, y),
                P(x + 1, y),
                P(x + 2, y),
                P(x + 2, y + 1),
                P(x + 2, y + 2),
            ],
            Shape::Tall => vec![P(x, y), P(x, y + 1), P(x, y + 2), P(x, y + 3)],
            Shape::Block => vec![P(x, y), P(x + 1, y), P(x, y + 1), P(x + 1, y + 1)],
        }
    }
}

#[derive(Debug, Hash, PartialEq, Eq)]
struct P(u8, u64);

struct Rock<'a> {
    shape: &'a Shape,
    pos: P,
}

impl Rock<'_> {
    fn can_move_down(&self, rocks: &HashSet<P>) -> bool {
        // base case is rock is at y == 0 on the floor
        if self.pos.1 == 0 {
            return false;
        }

        !self
            .shape
            .get_pieces(&P(self.pos.0, self.pos.1 - 1))
            .iter()
            .any(|p| rocks.contains(p))
    }

    fn can_move_left(&self, rocks: &HashSet<P>) -> bool {
        if self.pos.0 == MIN_X {
            return false;
        }

        !self
            .shape
            .get_pieces(&P(self.pos.0 - 1, self.pos.1))
            .iter()
            .any(|p| rocks.contains(p))
    }

    fn can_move_right(&self, rocks: &HashSet<P>) -> bool {
        let x = self.pos.0 + 1;

        if match self.shape {
            Shape::Flat => x + 3 == MAX_X,
            Shape::Cross => x + 2 == MAX_X,
            Shape::Angle => x + 2 == MAX_X,
            Shape::Tall => x == MAX_X,
            Shape::Block => x + 1 == MAX_X,
        } {
            return false;
        }

        !self
            .shape
            .get_pieces(&P(x, self.pos.1))
            .iter()
            .any(|p| rocks.contains(p))
    }
}

#[derive(Default, Debug)]
pub struct Solution {
    jets: Vec<Dir>,
    shapes: Vec<Shape>,
}

impl Solver for Solution {
    fn get_input(&self) -> &'static str {
        INPUT
        // ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"
    }

    fn with_input(&mut self, input: &str) {
        self.jets = input.chars().map(Dir::from).collect();
        self.shapes = vec![
            Shape::Flat,
            Shape::Cross,
            Shape::Angle,
            Shape::Tall,
            Shape::Block,
        ];
    }

    fn solve_part1(&self) -> String {
        let mut jets = self.jets.iter().cycle();
        let mut shapes = self.shapes.iter().cycle();
        let mut rocks: HashSet<P> = HashSet::new();

        // start on the floor;
        let mut max_y = 0;
        let mut rocks_count = 0;
        while rocks_count < 2022 {
            rocks_count += 1;
            let mut rock = Rock {
                pos: P(MIN_X + 2, max_y + 3),
                shape: shapes.next().unwrap(),
            };

            loop {
                // print_view(&rock, &rocks, max_y);
                let jet = jets.next().unwrap();
                match jet {
                    Dir::Left => {
                        if rock.can_move_left(&rocks) {
                            rock.pos.0 -= 1;
                        }
                    }
                    Dir::Right => {
                        if rock.can_move_right(&rocks) {
                            rock.pos.0 += 1;
                        }
                    }
                }

                if rock.can_move_down(&rocks) {
                    rock.pos.1 -= 1;
                } else {
                    break;
                }
            }

            rocks.extend(
                rock.shape
                    .get_pieces(&rock.pos)
                    .into_iter()
                    .inspect(|p| max_y = max_y.max(p.1 + 1)),
            );
        }

        max_y.to_string()
    }

    fn solve_part2(&self) -> String {
        let mut b = 0u128;
        for i in 0..1_000_000_000_000u64 {
            b += 1;
        }
        b.to_string()
    }
}

fn print_view(rock: &Rock, rocks: &HashSet<P>, max_y: u64) {
    // return;
    clear_terminal();
    let max_y = max_y.max(30);
    let min_y = if max_y > 30 { max_y - 30 } else { 0 };
    let rock = rock.shape.get_pieces(&rock.pos);
    for y in (min_y..max_y + 10).rev() {
        print!("|");
        for x in MIN_X..MAX_X {
            let p = P(x, y);
            if rocks.contains(&p) {
                print!("#");
            } else if rock.contains(&p) {
                print!("@");
            } else {
                print!(".");
            }
        }
        print!("|\n");
        if y == 0 {
            println!("+-------+");
        }
    }
    sleep(Duration::from_millis(40));
}

fn clear_terminal() {
    print!("{esc}c", esc = 27 as char);
    print!("\x1b[{};{}H", 0, 0);
}

#[cfg(test)]
mod test {
    use super::*;

    fn get_example_input<'a>() -> &'a str {
        ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>"
    }

    #[test]
    fn test_parse_example() {
        let mut solver = Solution::default();
        solver.with_input(get_example_input());
        println!("{:#?}", solver);

        // print_view(80);
    }

    #[test]
    fn test_solution_example1() {
        let mut solver = Solution::default();
        solver.with_input(get_example_input());
        let solution = solver.solve_part1();
        assert_eq!(solution, "3068");
    }

    #[test]
    fn test_solution_example2() {
        let mut solver = Solution::default();
        solver.with_input(get_example_input());
        let solution = solver.solve_part2();
        assert_eq!(solution, "");
    }

    #[test]
    fn test_parse() {
        let mut solver = Solution::default();
        solver.with_input(solver.get_input());
        println!("{:#?}", solver);
    }

    #[test]
    fn test_solution_part1() {
        let mut solver = Solution::default();
        solver.with_input(solver.get_input());
        let solution = solver.solve_part1();
        assert_eq!(solution, "3147");
    }

    #[test]
    fn test_solution_part2() {
        let mut solver = Solution::default();
        solver.with_input(solver.get_input());
        let solution = solver.solve_part2();
        assert_eq!(solution, "");
    }
}

const INPUT: &str = "><<<><<>>>><<><<<<>>>><<<>>><<<>>>><<<><>><<<>>>><<<><>>><<>>>><>>>><>><<<>>><<<<>><>><<>>><<<<>>>><>>><<<>><<<<><<<<>>><<>>>><><>>><<<<>><<>>>><<><<<<><<>>>><<<><<><>>>><<<><<<>>><<<>>>><<<>>><<>>>><<<><<<<>>>><<>><<<<>>>><<>>>><<<>><<>>>><>>>><<<<>>><>>>><>>>><<<<>><<<>><<<>>>><<<>>>><<<><<<>>>><>><<>><>>><<<>>><>><<<<><<<<><>>><<>>>><<<<>>>><<<<><<<>>>><><<>>><<<>>>><<<>>>><><<>>><<<>>><<<<>><<<<>>>><>><<<<><<<>>><<>>>><>><<<>>>><<<>>>><<>>>><<<><>><>>><<<>><>>>><<<<>><<<>><<><<<<>>><<<>>>><>>><<<>>><<<<>>><<>><<><<<<>>>><>><>>>><>>>><<<>>>><>>><<<>>><<<<>>><<>>>><<>>><<<>>><<>>><<<>><<<>>><<<>><>>><<>><<<><<><<<<><<<<>><>><><>>><<<><>><<<>>>><<<>>>><<<>><<<>><<<>>>><>><<<><<<><>>><<<>><<<><<<<><>>><<<<>>>><>>><<<>><><<>>>><<<>><<<>>>><<<>>><<><<>><<<<><<>>>><<<>><<<<>>>><<>>><<<<>>><<>>><<<<><><<<<>>>><<>>>><>>>><<<>>><<<<>><<>>><<<>><<>>>><>>>><<<>><<<>>><<<>><<>><<>>>><<<<>><<>><<>>>><<>>><<>>><<<>>><<<<>>><<>><<<>><>>>><<<<><<>>>><<<<>>><>>><>><>><<<<><>>>><<<<><<<<>>><<<<>>>><>>><<<<><<<>>>><<<>>><><>>>><>><>><<<<>>><<<<>>>><<<<>>><<<<>><<<>>>><<<><<>>><>><>><<>>>><>><<<<>><<><>><<<>>><><<>>>><>>>><>>>><<<>>>><<<>>>><<<>>><<>>>><<<<>><<<><<<>>>><<<<>>>><<<<>><<>><<<<>><<><>>><><<<<><><>><<>>>><<<<>>>><>>>><<<>>><<>>>><>>><<>>>><<<<><<>>>><<<>>>><>>><<>>>><>>><>><<<<><><>><<<<>>>><>>>><<>>>><<<<>>>><>>>><<><<<>><<<>><<<><<<<>>>><<>>><<>>><<><<<>>><<<>>>><<<>>>><<<<><<<<><<<>>><>>>><<<>><<<>>>><<<>>>><<<<>>><<>>>><>>>><>><<<<>><<>><>><<<<>>>><<><<<><<<<>>><<<>><<<>>><>>><<<<><<>>><<>><<>>>><<>><<><<<>><<<>>>><<><<<<>>>><<<<>>>><<<>><<<>><<<<>>>><<<>><<<<>>><>>>><<<<>><><><<>>><<<><<<>><><<<>>>><<>>>><<>>>><<<>>>><<<<>><<<<>>><<>><<<<>>><<<>><<<><<<<>><>>><<<><<<<>>>><<<<>>><<><<>><><<<<><<>><>>>><<<><<<<>>><<>><<<<>><<<>>>><<>>>><<><>>>><><<<>>>><<<<><><<<<>>><<<>>><<<><<<<>>>><<<<>>>><<<<>>>><<<<><><<<<>>><<<<>><>>><>>><<<>><>>>><<<<>><>><<<<><<<><>><<>>>><<<<><<<><<<>>><<<>>>><>>><<><<>><<<<><<<>>>><<<<>><<>>>><><<<<><><<>><<<><<<<><<>>><<>><<<>>>><<<<>>><<<>>>><<<<>>>><<<<>>><<<<>><<<<>><<<>>>><><<>>>><>>>><<<<>><><<<><><<<>>>><>>>><<>><>>>><>><<<<>>><<>>>><<>><<<<><<<<>>>><>><>>><<<<>><><<<>><<><<<<>><<>><<<<><<>><>>>><<<>><<<>>>><<<>>>><<<>>>><<<>>><<><<<><<>>><<>><<>>>><<<<>><<<<><<<<>>><>><>>>><<<<>>>><<<>>><<>>><<>>><<>><<<>><>>>><>>><>><>><<>>>><><<<<>><<<<><>>><<<>>><<<<>>><<><<>>><>><<><<<<>>>><<>>><<<<>>>><<<<><<<<>><><<<<>>><<<>><<<<>>>><<>>><<>><<<<>>><<>>><<<>><>>>><>>>><><<>><<<>>>><<<<>>>><<><<<<>>>><<<><<><<<<><<<<>>><<<<><<<<><<>><<<<>>>><<>><<<<>><<>>><<<>>>><<<><<<>><<<>>><>>><>><<<>><<>><<<>><<<>><<<<>>>><<<<>><>><<>>><<<><>><<<<>>><<<<>>><><<><<<<>>><<>>>><<<<>>>><<<<><>>>><<<<>>>><<<>>>><<<<>><<>><<>>><><>><>>><>>>><>>><>>>><<<>>><<><>>><>>><><>>>><<<><<>>>><<><<<><<>>><><<<>>><<>><<<<>><<<><>><<>><<<>><<<<>><<>><<>><>>>><>>><<<<>>>><<>>><<<>>>><<<<>>>><<><>><<>><<<<>>><>>>><>>><<>><<>>>><>>>><<>>>><<<>>><<>><<<><<<<>>><<><<>>><<<>>><><>><<<<>><<><<<>><><<<<><><<<><<<><<<<>><<>>>><<>><<<>>><<<><<<<>><<>><<<>>><<<<><>>><><<<<>>><<><<><>><>>>><>>><<<<><<>>><<<>><<<>><<<>>><>><>>>><<<>>><<<>>><><>>><<><<>><<<><<<>><<>>><<>>>><<<>>><<><>><>><<<>>><<<<>><<<><>>>><<<>>>><<>>>><<<<>>>><<<>>>><<>>>><<<><<<><<<>><>>>><<>>><>>>><<>>><<<>>>><>>>><<<<>>>><>>>><<<><<<<>><<<>>>><<<>>><<<>>>><<<<>><<<>><<<>>>><<<<>>>><<<<>>>><<<>>><>>><>>>><<<<>><<>>><>>>><>>><>>><<<>>><<>>>><<<<>>>><>>><<<>><<>><<><<<>>>><>>><<><>>><<>>><<>>><<<<>><<<>>>><<<><<<<><<><<<<>>><<>>>><<<>><>><<>>><<<<>>>><<>>>><<<<>>>><<<>>><<<>>>><>>><<><<<<>><<<><<<<>>>><>>><<<<>>><<<<>><<<>>>><>><<<<><<<><<<>>>><<<>>><>>>><<<<>><<<<>>><<>>>><>>>><<<>>>><<><>>><<<><<<<><<<<>><><<<<>><>>><<>>><<<>><<<<>>>><<<<>><<<<><<<<>><<<>>>><<<<>>><<<>><<<>><<<<>><>>>><>><<<>>>><<<<>>>><<><<<>><><<<><<>>><>>>><><<<<>>>><<>><<<>>>><<<<>><<<<><>>>><<<>>><<<<><<<><>><<<>>><>><<<><<<<><<<>>>><<<<>>>><<<>>>><<<<><>><<<<>>><<<><<>>><>><<>><<<<>><<>>>><>><<>><<<><<>>><<>><<<<>><<<<>>>><<>>><<<>>><<><>>>><<>>>><<><<<>><<<>>><>><><<<<>>>><>>><<>><<><<<<>>>><<>>>><<<>><<<>>><<<<>>>><>>>><<>><>>><<<>><>><>>>><<<<><<>>>><>>>><><>>><<<>><<<>><<<><>>>><<>>>><<<<>>><<><<>>>><<<<>>>><><<<>><<<>>><<<>>>><<>>>><<<<><<<<>>><<<<>><>>><<<>>>><>>><<<<>>><<>>><<<>>>><<><<>>><<<><<<>>>><<<>>><<<><><<<<>><<<>>>><<><<<<><>>>><><<<>>><<<>><<<>>><>>><<<>>>><<><<<><<>>><<>><<>>>><<<>><<>>>><<>><<<>>>><<<>><<<>><><<><<<>><<<>>><>><>>>><<>><<>><<>><<<>>><<<<>><<>>>><<<>><<<><<><<<>>><>><<<>><<>>>><<<<>><<<>><<<>>><<>>><<>>><<<><>><<>>><<>><<<<>>><<><>>><<<>>><<>>>><<<<>><<<<>><>>><><<>>><>>>><<><<<<><<<<><>>>><<>>>><<<<>>><>>><<><<<><>>><<<>>><<<<>>>><<<><>><<<<>><<>>><<<<><>>><>>><<<<>>>><>>><<>><<<>>>><>>>><<>>>><<<<>>><<<>><>>>><<<><><<<<><<<<>>>><<<>>><><<><<<>><>><>><<<<>>><<><<<<>>><<>>>><>>><<><<<<>><<>>>><<><<<<>><<>><>><<<><<><<<>>>><<<<><<<<>>><<>>>><<<<>>><<<<>>>><<<>>>><><<<><>>>><>>><<>>>><<<>>>><>>>><>>><>><>>><>>><<<>>><>>>><>><<<<><<<><<<<>>><<<<>>><<<<>><<<><<<>><<<>>><<<>>>><<>><<>>>><<>>>><><<><><<<<><>><<<<><<<<>>>><<>>>><<<<>>><<><<<>>>><>>><<><<>>><<<<>><>>><<<>>><<>><<<<>>><<<<>>><><<<><><<<>><>>><<>>>><<>><<<<>>><<<<><<<><>><<<<>><><><<>><>>>><<<<><<<>>>><<<<>>>><<>><<<<><><<><>>>><<<>>><<>>>><<<><>>><><<<>>>><<<<><<<<>><<<>><>><<<<>>>><<<<>>><<<>><>><<>>><><<<>>>><<<<>>><<><>>><<>><<<><><<<<>>>><<<>>><<>>>><><>><><<<<>><<<<>>>><>>><><<<>>>><>><><<<<>>>><>>><<<<>><<<<>>>><<><>>>><<<<>><<<<>>>><<<>>><<<<><<<<>><>>><<>>>><<>>>><<<><<>>>><<<>>>><><>>>><<<<>><<<>><<>>><<<<><<<>>>><<>><<<><<><<<<>><<<>><><>>>><<>><<<>>>><<<<>>><<>><<<<><<>><>>><><<<<><>>>><<<>>>><<<<>><>>>><><>><<>>><<<>>>><>><<><<<<>>>><<<>><<<>><<>>><<><<<<>>><<<>><<<>>><<>>>><<>>>><<<<>>>><>><<<><<>><<>>><<<<>><<<>><<<<>>><><>>>><<>>>><>>><>><<<<>>><>>><>>><<<><<>>>><<<>>>><<>>><<<>>><<<>><<<<><>>>><<<>><<<>><<<<>><>>>><<><<<<><>>><<<<>>><<>>><<<<>>><<<><>><<<>>><<>><<<<>>>><<>>><<<<>>>><<<<><<<>><><<<>>>><<<<>>>><<<<>>><<>>>><<>><<>><<<>><<<>><<<<>><><>><>><<<><>>>><<<><<<>><<<><<<>>><<<><<<<>>>><><<>>><><<<<><<<<>>>><<<><<<>><<><<>><<<>>>><><<>>>><<<<>><>><><>>>><<<>>>><<>>>><<>>>><>>><>>><<<<><<<<><<<<><<<<>>><><<<<>>>><><>>>><<<><><<>>><<<<><<<>><<<<>><<>>><><<<<>><><<<>>>><>>>><>>><<<>><>><<<<>><>><<<>>>><<><<>><>><<<<>>><<>><<>>>><<<<>><<<<>><>><<<>>><>><><<<<>><<<<><>><<<>>>><<<<><>>>><<<<>><>>>><>>><<<>>><<>>><>>><<<<>><<><<<>>><>><>>><>>><<<<>>>><<><>>><<>>>><<<<>>>><<>><<<>><>><<<<>>>><<<>><<>><>><>><><<><>><><<>>><<<>><>>>><<<<><<<<><<<<>>><<<<>>>><<<<>>>><<<<>>>><<>><>><<<><>>><<<>>>><<<>>><<<><<>>>><>><<>>>><<><>>><<>><<<<>><>><<<<>>>><<<>>>><<<>>><<<<>>>><<><<>>>><><<>>><>><<>><<<<>>>><<><>><>><<<<>><>><<<<>>>><><<<<><>><<<>>>><<<<>>>><<>>>><<>>><<<<>>><>>>><<><<<<>><>><>><<<<>>>><<>>>><<<<>>><<><<<>><<<>>>><<>>>><>>><>><<<>>><<>>>><><<<<>>>><<<>>>><<><<<>>><><><<<>><<>>>><<<>><<><<<<>><>>><>>><><<>>><<>><<>>>><<>><><<>>><>><>>><>>>><<<<>>>><<<<>><>><<<<>><<<<><<>>>><>>>><<>><<<>>><><<<<>>>><<<<><<><<<<>>><<><>><<<<>><<>><>>>><><<<>>>><<<<>>><<<>>>><<>><<<>>><<<<><>>>><<<<>>>><<<<><<<<>>><<<>><><<<<>><<>>><<<>>>><<>>>><<<><<>><<<<><<><>>>><<<<><>><<<>><<<<>><>><<<>>>><<>><><<<>>><<<<>>>><>>>><<>><<<<><<>>>><<>>><>>><<>>>><>>><<<<>>><<<>>><<<>><<<>>><<>>><<<<>>>><<<>><<<<>>>><<<><<<<>>><<<<>><<<<>>><<<<>><>><<<>>>><>>><<>>>><<>>><<>><>>><<<<>><>>>><<<>>>><<<>>><<<<><>>><>><<>>><>>>><<<>><<>><<>>><<<><>>><<>>><>>><<>>>><>>><<<<><>>>><>><<<>><<<<>><<>>><<>>>><<<>><<<>>><<>>>><<<><<<<>>>><<<>><>>><<<>><<>>><>>><<<>>>><<><<>>>><>><<<<>>>><<><<<>>>><<<<>>><<><<<>>>><<<>><<>><<<<>>><>>>><>>>><<>>><><<<<>>>><<<<>>><<<><<<<>><<<<>><<<<>><<<>><<<<>><>>>><<<><<<<><><<>>>><<>><>><<<<>>><<<>>><<<<>>>><<<>>>><<<>><<<<><<<>>>><<>>><<>><<<><<>>>><<<<>>><>>><<<>>>><>><<>>><<<<>>><<<>>>><><<>><<>><<<<><<>><>>><<<>>><<>>>><<<<>>><<<>>><<<>>><<><<<<>>>><<<>>><><<<><>><<>>>><><>><><<>>><>>><<<<>><<<<>><>>>><><<<><><><<>><>>><<>>><<<<>>>><<><<<<>><<<><>>>><>>><<>>>><>>><><><<<>>>><<<<>>>><<>><<<<>><<><>><>>>><>><<<>>>><><<<>><<<>><<>><<<>>><><>><><<>>><<<>><<<><<<<>>>><>>>><<<<><>>><<<<>>>><>>>><<<>>>><<<<>><<<>>><<><>>><<<<><<>>><<<<><<>>>><<<<>>><>>><<<><<<>><>>><<<<>>>><<<<>>><<>>>><<<<>>>><<<>>><<<<><<<>>><>>>><<><>>><<<>>>><>><<<<><>><>>>><>><<>><>><<>>><<<<>>><>>>><<<<>><<><>>><<<<>>><>>>><>>><<>><<<<>><<><<<>>>><>>><<><<>>>><<>>><<>>>><>>><>>>><<<<><<<<>>><<<><<>>>><<<<>><<<>><<><<><<><<<><<<<><>><<>>>><<<<>>><<<>>><<<<>>><<<><<<>>><<<>>>><<<>>><<<<>><<<<>><<><<<<>>>><<<>>><<>>><>><>><<<><<<<>>><<><<<>>><<<<>>>><>>><<<>>>><<<>><<>>><<<>>><<<>><>><>>>><<<<>>>><<<>><>><<<>><<<<>>>><<>>>><<<<><<><>>><<>>><<<<>>>><<<<><<>>><<<>><>><<<<>>>><<<<>><<<><<><<><><<<<><<>>><<<><<>><<<<><<<<><<<>><>><<<<>>>><<<>><<<<><<>><<<>>>><<>><<>><>><<<<>><>>>><<<<>><<<>><<>>>><<><<<>><<<>>>><<>>>><<<<>><>>><<<<>><>>><<<>>><<>>>><<<<>><<<><>><<><<<>><<>>>><<<>>><>><>>>><<>><>><<>><<<><<<<>>>><<<<>>>><<>>>><<<<>>>><>>>><<>>><>>>><<>>><<<<>><<<<>><<<>><<>>><<<<>>>><<<<>>>><<<>>>><<>><<<>>><<>>>><<>><<>>>><<>>>><<><<<<>><<<>>><<<><<>>><<>><<<<><<>>><<<<>>>><<><<<<><>><<>>><<<<>>>><<<<><<<>>><><>>>><>><<<><>>>><<<>>>><>>><<><<>><><<<<>>>><<>>>><<<><<>>>><>>>><<<<><<<<>>>><<><>>>><>>><><<>>><<<>>><<<<><>><<<>><<<><<<><<<<>><<<>>><<<<>>>><<<>>>><<<>>><<<>>><>>><<>><<<>>><<><<<><>>>><>>><<<<>>><<><<<<>>>><<<><<<<>><<>>>><<>>><<<<>>>><<>>><><<<>>><<>><<>><<>>>><<<<><<<>>><<<<>>><<<<>>>><<<>>>><<<<>>><<<><>>><>>><<>>>><>>><<>>><<>><<>>>><<>>><<<<>>>><<<<>><<<>>>><<<<>>>><<<<>><<<><>><<>><>>><<<<><<<>><><<<>>>><<<>>><<>>><<>>>><<<<>>>><<<><<<>>><<<>><<<>><<<<>>><<<<>><<<>>><<<><<<><<>><><>><<<>>><<<>>><<>>><<<>>><<>>><<<<>><<<>><>><<<<>><<<<>><<>><<<>><<<<>>>><<<><<<<><<<<>><>>><<>><<><<>>><<<><<>>><<<><<<<>><>>><<>><>>><<>>>><<>>>><<<<>><<><<>>><<<>>>><<><<<<>>>><><<<<>>><<<<>><<<<>><<>>><<<<>>>><>>><<<<>><<<<>><><<<<>>>><<<>>><<>><<<<>>><<<><<<>>><>><<>>>><<>>><>><>><<<<>>>><><<<<><>>><<><<>><<<>>><>><<<>>>><<<<>>><<<>><<<<>>>><>><<<>>>><<<>>><<>>>><<>><<<<>>><<>>><<<>><<><>><>><<>><<<><><>>><<<>><<<>><<<<>>><>>><><<<>><<<>>>><<<><<>>>><>>>><>><>>><<<<><<<>><<<<>><<><<<<>>>><<>><<>>>><<<><<<>>><<<<>>><<<>>>><<>>>><<<>>><<<<>><<<>>><>>><>>>><<<>><<<<><<<<><><<<>>><><<<<>><<<>>>><<<<>>>><<><<><<<><<<><><<>>";
